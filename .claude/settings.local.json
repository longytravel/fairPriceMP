{
  "permissions": {
    "allow": [
      "Bash(git commit -m \"$(cat <<''EOF''\nfeat: Implement story 1.1 - Multi-symbol configuration registry\n\nImplements configuration management system for multi-symbol trading with\nper-symbol overrides and runtime state tracking.\n\n## Features Implemented\n\n### Configuration System\n- SymbolConfigEntry DTO with per-symbol overrides (lot size, grid params, risk settings)\n- ConfigLoader service for CSV-based configuration loading\n- Validation for ASCII-only strings and numeric ranges\n- Symbol enable/disable flags\n\n### State Management\n- SymbolStateRegistry for in-memory state access\n- Runtime state snapshots by symbol\n- Configuration retrieval by symbol key\n\n### Data Models\n- Grid configuration (size, levels, spacing)\n- Risk management (lot size, drawdown threshold, catastrophe SL)\n- Trade filters (spread, slippage, trading hours)\n- Entry/exit settings (EMA periods, trigger pips, exit on EMA)\n- Correlation settings (enable, threshold)\n- Dashboard display settings (color, row position)\n\n## Files Added\n- Include/fairPriceMP/DTO/SymbolConfigEntry.mqh\n- Include/fairPriceMP/ConfigLoader.mqh\n- Include/fairPriceMP/SymbolStateRegistry.mqh\n- docs/stories/1.1.multi-symbol-configuration-registry.md\n\nðŸ¤– Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(git commit -m \"$(cat <<''EOF''\nfeat: Implement story 1.2 - Per-symbol engine trade lifecycle\n\nImplements independent symbol engines for fairPrice trade logic with isolated\ntick processing, signal evaluation, and grid management.\n\n## Features Implemented\n\n### Symbol Engine\n- SymbolEngine class for per-symbol trade execution\n- Independent EMA indicator handles per symbol\n- Signal evaluation (buy/sell based on EMA deviation)\n- Trend filter using slow EMA\n- Entry/exit logic with EMA touch detection\n\n### Trade Services\n- TradeProxy service wrapping MT5 trade API\n- Price and lot normalization per symbol\n- Error handling and logging for all trade operations\n- Symbol-filtered position/order queries\n\n### Trade Filters\n- Spread filter (max allowed spread in points)\n- Trading hours filter (start/end hour validation)\n- Slippage tolerance configuration\n\n### Grid System\n- Market entry with initial order\n- Pending grid seeding (buy/sell limits)\n- Configurable grid count and spacing\n- Catastrophe stop loss per symbol\n\n### Logging & Orchestration\n- StructuredLogger with ASCII-only enforcement\n- Event codes (max 10 chars, UPPER_SNAKE_CASE)\n- CoreOrchestrator for multi-symbol coordination\n- Tick dispatch per symbol\n\n## Files Added\n- Experts/fairPriceMP/Services/StructuredLogger.mqh\n- Experts/fairPriceMP/Services/TradeProxy.mqh\n- Experts/fairPriceMP/CoreOrchestrator.mq5\n- Experts/fairPriceMP/CoreOrchestrator_Diagnostic.mq5\n- docs/stories/1.2.per-symbol-engine-trade-lifecycle.md\n\nðŸ¤– Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(git commit -m \"$(cat <<''EOF''\ntest: Add comprehensive unit test suite for stories 1.1, 1.2, 1.3\n\nCreated unit tests to validate configuration loading, symbol engine functionality,\nand risk management features.\n\n## Test Files Added\n- Scripts/Test_ConfigLoader.mq5 - Configuration loading and validation tests\n- Scripts/Test_SymbolEngine.mq5 - Symbol engine trade lifecycle tests\n- Scripts/Test_SymbolEngine_Risk.mq5 - Equity tracking and isolation tests (5/5 passing)\n\n## Test Coverage\n- Configuration entry validation (ASCII-only, numeric ranges)\n- Symbol engine initialization and EMA setup\n- Equity tracking calculations and drawdown formulas\n- Symbol state isolation and independence\n- Position count validation and symbol filtering\n\nAll tests designed for MT5 Strategy Tester and script execution.\n\nðŸ¤– Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(git push:*)",
      "Bash(powershell:*)",
      "Bash(git commit -m \"$(cat <<''EOF''\nfeat: Add enhanced MT5 file auto-sync system\n\nImplements comprehensive file synchronization system that monitors ALL file types\nand automatically syncs changes from development folder to MT5 terminal.\n\n## Features Implemented\n\n### Enhanced File Watcher\n- Monitors ALL file types (*.*) instead of just .mq5\n- Watches all MQL5 folders: Experts, Include, Scripts, Files, Indicators, Libraries\n- Real-time sync on file save/create\n- Smart retry logic for file locks\n- Desktop notifications on successful sync\n\n### Sync Capabilities\n- One-way sync (Dev â†’ MT5) as specified\n- Initial bulk sync on startup\n- Automatic backup before overwriting files\n- File type detection and display\n- Compile reminders for source files (.mq5, .mqh)\n\n### Safety Features\n- Timestamped backups: filename_YYYYMMDD_HHMMSS.ext\n- File lock detection with retry (up to 5 attempts)\n- Copy retry logic for MT5-locked files (up to 3 attempts)\n- Error handling with clear console messages\n\n### User Experience\n- Colored console output with emoji indicators\n- Progress tracking for initial sync\n- File type labels (MQL5 Source, CSV Data, etc.)\n- Visual startup banner\n- Clean shutdown handling\n\n## Files Added\n- MT5_Enhanced_Sync.ps1 - Enhanced PowerShell sync script\n- sync-config.json - Configuration file (customizable settings)\n- Start_Enhanced_Sync.bat - Easy launcher\n- docs/FILE-SYNC-GUIDE.md - Comprehensive user guide\n\n## Configuration\nAll settings defined per user requirements:\n- âœ… Monitor ALL file types\n- âœ… One-way sync (Dev â†’ MT5)\n- âœ… Manual compile (user presses F7)\n- âœ… Manual git commits\n- âœ… Backup enabled\n- âœ… Desktop notifications\n\n## Usage\nSimply run: Start_Enhanced_Sync.bat\nEdit files in dev folder â†’ Auto-syncs to MT5 â†’ Compile in MetaEditor (F7)\n\nReplaces manual file copying workflow with automated real-time sync.\n\nðŸ¤– Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(git commit:*)",
      "Bash(if not exist \"docs\\qa\\gates\" mkdir \"docs\\qa\\gates\")",
      "Bash(git add:*)"
    ],
    "deny": [],
    "ask": []
  }
}